{"version":3,"sources":["components/Filter/Filter.module.css","components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js","App.module.css"],"names":["module","exports","ContactForm","onSubmit","useState","name","setName","number","setNumber","handleChange","event","target","value","className","s","contactEditor","e","preventDefault","label","onChange","textarea","type","pattern","title","required","button","ContactList","contacts","onDeleteContact","onToggleCompleted","list","map","id","completed","classNames","item","checkbox","checked","text","pug","onClick","Filter","App","JSON","parse","localStorage","getItem","setContacts","filter","setFilter","useEffect","window","setItem","stringify","totalContactsCount","length","visibleContacts","normalizedFilter","toLowerCase","trim","contact","includes","getVisibleContacts","completeContactsCount","reduce","acc","todo","container","mainTitle","shortid","generate","find","alert","prevState","currentTarget","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b944fde8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__1dfn5\",\"text\":\"Filter_text__PA8u_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactEditor\":\"ContactForm_contactEditor__2Cvro\",\"textarea\":\"ContactForm_textarea__txImj\",\"label\":\"ContactForm_label__383NX\",\"button\":\"ContactForm_button__2qAPs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__1pho2\",\"item\":\"ContactList_item__3OXWy\",\"completed\":\"ContactList_completed__JxeLb\",\"pug\":\"ContactList_pug__Vp0Uw\",\"text\":\"ContactList_text__1fvuO\",\"checkbox\":\"ContactList_checkbox__2D9vv\"};","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport s from './ContactForm.module.css';\n\nexport default function ContactForm({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit(name, number);\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={s.contactEditor} onSubmit={handleSubmit}>\n      <label className={s.label}>\n        Name\n        <input\n          value={name}\n          onChange={handleChange}\n          className={s.textarea}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n      <label className={s.label}>\n        Number\n        <input\n          value={number}\n          onChange={handleChange}\n          className={s.textarea}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n      <button type=\"submit\" className={s.button}>\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport s from './ContactList.module.css';\n\nconst ContactList = ({ contacts, onDeleteContact, onToggleCompleted }) => (\n  <ul className={s.list}>\n    {contacts.map(({ id, name, number, completed }) => (\n      <li key={id} className={classNames(s.item, { [s.completed]: completed })}>\n        <input\n          type=\"checkbox\"\n          className={s.checkbox}\n          checked={completed}\n          onChange={() => onToggleCompleted(id)}\n        />\n        <p className={s.text}>\n          {name}: {number}\n        </p>\n        <button\n          type=\"button\"\n          className={s.pug}\n          onClick={() => onDeleteContact(id)}\n        >\n          Delete\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n  onToggleCompleted: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Filter.module.css';\n\nconst Filter = ({ value, onChange }) => (\n  <label className={s.label}>\n    Find contacts by name\n    <input type=\"text\" className={s.text} value={value} onChange={onChange} />\n  </label>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import React, { useState, useEffect } from 'react';\nimport shortid from 'shortid';\n\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\n\nimport s from './App.module.css';\n\nexport default function App() {\n  const [contacts, setContacts] = useState(\n    JSON.parse(localStorage.getItem('contacts')) ?? [\n      {\n        id: '',\n        name: '',\n        number: '',\n        completed: false,\n      },\n    ],\n  );\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    window.localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const addContact = (name, number) => {\n    const contact = {\n      id: shortid.generate(),\n      name,\n      number,\n      completed: false,\n    };\n\n    if (contacts.find(contact => contact.name === name)) {\n      alert(`${name} is already in contacts.`);\n    } else {\n      setContacts(prevState => [...prevState, contact]);\n    }\n  };\n\n  const deleteContact = contactId => {\n    setContacts(prevState =>\n      prevState.filter(contact => contact.id !== contactId),\n    );\n  };\n\n  const toggleCompleted = contactId => {\n    setContacts(prevState =>\n      prevState.map(contact =>\n        contact.id === contactId\n          ? { ...contact, completed: !contact.completed }\n          : contact,\n      ),\n    );\n  };\n\n  const hangeFilter = e => {\n    setFilter(e.currentTarget.value);\n  };\n\n  const getVisibleContacts = () => {\n    const normalizedFilter = filter.toLowerCase().trim();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  const getCompletedContactCount = () => {\n    return contacts.reduce((acc, todo) => (todo.completed ? acc + 1 : acc), 0);\n  };\n\n  const totalContactsCount = contacts.length;\n  const visibleContacts = getVisibleContacts();\n  const completeContactsCount = getCompletedContactCount();\n\n  return (\n    <div className={s.container}>\n      <h1 className={s.mainTitle}>Phonebook</h1>\n      <p className={s.text}>All contacts: {totalContactsCount}</p>\n      <p className={s.text}>Number of selected: {completeContactsCount} </p>\n\n      <ContactForm onSubmit={addContact} />\n      <h2 className={s.mainTitle}>Contacts</h2>\n      <Filter value={filter} onChange={hangeFilter} />\n      <ContactList\n        contacts={visibleContacts}\n        onDeleteContact={deleteContact}\n        onToggleCompleted={toggleCompleted}\n      />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// ========================================\n// // import { string } from 'prop-types';\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2eKaa\",\"mainTitle\":\"App_mainTitle__3x4yR\",\"text\":\"App_text__2qj6h\"};"],"sourceRoot":""}